"""
给定长度为 2n 的整数数组 nums ，你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), ..., (an, bn) ，使得从 1 到 n 的 min(ai, bi) 总和最大。

返回该 最大总和 。

 

示例 1：

输入：nums = [1,4,3,2]
输出：4
解释：所有可能的分法（忽略元素顺序）为：
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
所以最大总和为 4
示例 2：

输入：nums = [6,2,6,5,1,2]
输出：9
解释：最优的分法为 (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9
 

提示：

1 <= n <= 104
nums.length == 2 * n
-104 <= nums[i] <= 104
"""
# 帮助: 因为我们求的是分对之后,所有对的最小值加起来要最大,我们只需要保证在一对内,两个数的差值最小就行,为什么呢
# 因为一对内,不管大的那个数字比小的那个数字大多少都会被忽略,所以我们按照顺序去排序,隔一个取一个,加起来就是最小.
def arrayPairSum(nums: list[int]) -> int:
    nums = sorted(nums)
    sum = 0
    for i in range(0, len(nums), 2):
        sum += nums[i]

    return sum

if __name__ == "__main__":
    res = arrayPairSum([1,4,3,2])
    print(res)
    res = arrayPairSum([6,2,6,5,1,2])
    print(res)

